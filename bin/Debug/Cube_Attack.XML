<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Cube Attack(bachalor_work)</name>
    </assembly>
    <members>
        <member name="T:Operation.Serialize_W">
            Serialize wrapper 
        </member>
        <member name="M:Operation.Serialize_W.serialize_w(System.Object,System.String)">
            <summary>
            Function-wrapper which serialize object.
            </summary>
            <param name="superpolyMatrix">object that is serialized.</param>
            <param name="nameSerializeObj">Save obj into this* file.</param>
        </member>
        <member name="M:Operation.Serialize_W.deserialize_w_mm(System.String)">
            <summary>
            Function-wrapper which deserialize object.
            </summary>
            <param name="nameDeserializeObj">object is read from this* file.</param>
            <returns>desired object from a file.</returns>
        </member>
        <member name="T:Operation.IO">
            My stream reader 
        </member>
        <!-- Badly formed XML comment ignored for member "M:Operation.IO.readerFormFile(System.String,System.Int32)" -->
        <member name="M:Operation.BigInteger_W.ToHex(System.String)">
            <summary>
            Convert decimal value into hex.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="F:Matrix.Matrix.rows">
            <summary>
            Class attributes/members
            </summary>
        </member>
        <member name="F:Matrix.Matrix.cols">
            <summary>
            Class attributes/members
            </summary>
        </member>
        <member name="M:Matrix.Matrix.#ctor(System.Int32,System.Int32)">
            <summary>
            Contructor
            </summary>
        </member>
        <member name="P:Matrix.Matrix.Rows">
            <summary>
            Properites
            </summary>
        </member>
        <member name="P:Matrix.Matrix.Item(System.Int32,System.Int32)">
            <summary>
            Indexer
            </summary>
        </member>
        <member name="M:Matrix.Matrix.GetElement(System.Int32,System.Int32)">
            <summary>
            Internal functions for getting/setting values
            </summary>
        </member>
        <member name="M:Matrix.Matrix.Transpose">
            <summary>
            Returns the transpose of the current matrix
            </summary>
        </member>
        <member name="M:Matrix.Matrix.Minor(Matrix.Matrix,System.Int32,System.Int32)">
            <summary>
            Return the minor of a matrix element[Row,Col] 
            </summary> 
        </member>
        <member name="M:Matrix.Matrix.Determinent">
            <summary>
            Returns the determinent of the current Matrix
            It computes the determinent in the traditional way (i.e. using minors)
            </summary>
        </member>
        <member name="M:Matrix.Matrix.Determinent(Matrix.Matrix)">
            <summary>
            Helper function for the above Determinent() method
            it calls itself recursively and computes determinent using minors
            </summary>
        </member>
        <member name="M:Matrix.Matrix.Adjoint">
            <summary>
            Returns the adjoint of the current matrix
            </summary>
        </member>
        <member name="M:Matrix.Matrix.Inverse">
            <summary>
            Returns the inverse of a square matrix over GF(2) (by adjoint method)
            </summary>
        </member>
        <member name="M:Matrix.Matrix.op_Division(Matrix.Matrix,System.Int32)">
            <summary>
            Operator for the matrix object
            includes binary operator /
            </summary>
        </member>
        <member name="M:Matrix.Matrix.Multiply(Matrix.Matrix,System.Int32)">
            <summary>
            Internal function for the above operator
            </summary>
        </member>
        <member name="M:Matrix.Matrix.AddRow(System.Collections.Generic.List{System.Int32})">
            <summary>
            The function adds one superpoly for the current matrix
            </summary>
        </member>
        <member name="M:Matrix.Matrix.DeleteLastRow">
            <summary>
            The function deletes the last row of the current matrix
            </summary>
        </member>
        <member name="M:Matrix.Matrix.DeleteFirstColumn">
            <summary>
            The function deletes the first columnm of the current matrix
            </summary>
        </member>
        <member name="T:Matrix.MatrixVectorException">
            <summary>
            Exception class for Matrix and Vector, derived from System.Exception
            </summary>
        </member>
        <member name="M:CubeAttack.Program.func(System.Int32[],System.Int32[])">
            <summary>
            Master polynom represent such: f(v,x) = ....
            </summary>
            <param name="v">public input.</param>
            <param name="x">secret input.</param>
            <returns>Returns output bit, either 0 or 1.</returns>
        </member>
        <member name="M:CubeAttack.Program.black_box(System.Int32[],System.Int32[])">
            <summary>
            The function returns the black box output bit.
            </summary>
            <param name="v">Public variables.</param>
            <param name="x">Secret variables.</param>
            <returns>Returns the black box output bit, either 0 or 1.</returns>
        </member>
        <member name="M:CubeAttack.Program.linearity_test(System.Int32[],System.Collections.Generic.List{System.Int32})">
            <summary>
            Test for linearity of superpoly (BLR linearity test).
            </summary>
            <param name="v">public variable.</param>
            <returns>A boolean value indicating if the superpoly is probably linear or not.</returns>
        </member>
        <member name="M:CubeAttack.Program.ComputeSuperpoly(System.Int32[],System.Collections.Generic.List{System.Int32})">
            <summary>
            The function derives the algebraic structure of the superpoly from the maxterm.
            The structure is derived by computing the free term and the coefficients in the superpoly.
            </summary>
            <param name="pubVarElement">Public variables.</param>
            <param name="maxterm">Maxterm.</param>
            <returns>Returns the superpoly.</returns>
        </member>
        <member name="M:CubeAttack.Program.SecretVariableIndexes(System.Int32[],System.Collections.Generic.List{System.Int32})">
            <summary>
            Compute indexes of secret variables in superpoly(deg=2)
            </summary>
            <param name="pubVarElement"></param>
            <param name="maxterm">list of indexes(I)</param>
            <returns>indexes of secret variables</returns>
        </member>
        <member name="M:CubeAttack.Program.ComputeSuperpoly2(System.Int32[],System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.Int32})">
            <summary>
            Compute term of superpoly(deg=2)
            </summary>
            <param name="v">public variables</param>
            <param name="SVI">Secret variable indexes</param>
            <returns>List of term</returns>
        </member>
        <member name="M:CubeAttack.Program.SuperpolyAsString(System.Collections.Generic.List{System.Int32})">
            <summary>
            Represent superpoly(deg=1) in the string style : consts + x_j , j=1,...,n.
            </summary>
            <param name="superpoly">Superpoly represent by list of index</param>
            <returns>Superpoly in string format</returns>
        </member>
        <member name="M:CubeAttack.Program.Superpoly2AsString(System.Collections.Generic.List{System.Collections.Generic.List{System.Int32}})">
            <summary>
            Represent superpoly(deg=2) in the string
            </summary>
            <param name="superpoly2"></param>
            <returns></returns>
        </member>
        <member name="M:CubeAttack.Program.OutputKey(Vector.Vector)">
            <summary>
            The function outputs the key bits.
            </summary>
            <param name="res">Result vector</param>
        </member>
        <member name="M:CubeAttack.Program.InMatrix(System.Collections.Generic.List{System.Int32},Matrix.Matrix)">
            <summary>
            Test if superpoly is already in matrix.
            </summary>
            <param name="superpoly">The superpoly.</param>
            <param name="matrix">An n x n matrix whose rows contain their corresponding superpolys.</param>
            <returns>A boolean value indicating if the superpoly is in the matrix or not.</returns>
        </member>
        <member name="M:CubeAttack.Program.IsLinearIndependent(Matrix.Matrix)">
            <summary>
            Test if an n x m matrix contains n linearly independent vectors.
            </summary>
            <param name="A">n x m matrix.</param>
            <returns>A boolean value indicating if the matrix is regular or not.</returns>
        </member>
        <member name="M:CubeAttack.Program.PreprocessingPhase">
            <summary>
            Preprocessing phase of the cube attack.
            </summary>
        </member>
        <member name="M:CubeAttack.Program.OnlinePhase">
            <summary>
            Online phase of the cube attack.
            </summary>
        </member>
        <member name="M:CubeAttack.Program.ProcessCubeAttack(CubeAttack.Program.CubeAttackMode)">
            <summary>
            Does the actual CubeAttack processing
            </summary>
        </member>
        <member name="F:Vector.Vector.length">
            <summary>
            Class attributes/members
            </summary>
        </member>
        <member name="M:Vector.Vector.#ctor(System.Int32)">
            <summary>
            Contructor
            </summary>
        </member>
        <member name="P:Vector.Vector.Length">
            <summary>
            Properites
            </summary>
        </member>
        <member name="P:Vector.Vector.Item(System.Int32)">
            <summary>
            Indexer
            </summary>
        </member>
        <member name="M:Vector.Vector.GetElement(System.Int32)">
            <summary>
            Internal functions for getting/setting values
            </summary>
        </member>
        <member name="M:Vector.Vector.Multiply(Matrix.Matrix,Vector.Vector)">
            <summary>
            The function multiplies the given matrix on a vector
            </summary>
        </member>
        <member name="M:Vector.Vector.op_Multiply(Matrix.Matrix,Vector.Vector)">
            <summary>
            Operator for the Vector object
            includes binary operator *
            </summary>
        </member>
    </members>
</doc>
